---
- hosts: hng
  become: yes
  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Create hng user
      user:
        name: hng
        shell: /bin/bash
        create_home: yes
        groups: sudo

    - name: Install required packages
      apt:
        name:
          - postgresql
          - nginx
          - golang
          - git
          - rabbitmq-server
        state: present
        update_cache: yes

    - name: Set up directory for PostgreSQL credentials
      file:
        path: /var/secrets
        state: directory
        mode: '0755'

    - name: Save PostgreSQL credentials
      copy:
        content: "admin_user: admin\nadmin_password: securepassword"
        dest: /var/secrets/pg_pw.txt
        mode: '0600'

    - name: Create PostgreSQL user
      command: sudo -i -u postgres psql -c "CREATE USER admin WITH PASSWORD 'securepassword';"
      ignore_errors: yes

    - name: Create PostgreSQL database
      command: sudo -i -u postgres psql -c "CREATE DATABASE hng_db OWNER admin;"
      ignore_errors: yes

    - name: Ensure /opt/stage_5b is a safe directory for Git
      command: git config --global --add safe.directory /opt/stage_5b

    - name: Clean the existing repository directory
      file:
        path: /opt/stage_5b
        state: absent

    - name: Clone repository as root
      git:
        repo: 'https://github.com/hngprojects/hng_boilerplate_golang_web'
        dest: /opt/stage_5b
        version: devops
        accept_hostkey: yes

    - name: Change ownership to hng user
      file:
        path: /opt/stage_5b
        state: directory
        owner: hng
        group: hng
        recurse: yes

    - name: Create and populate .env file
      copy:
        content: |
          export SERVER_PORT=3000
          export SERVER_SECRET="replace_with_strong_unique_secret_key"
          export SERVER_ACCESSTOKENEXPIREDURATION=2
          export REQUEST_PER_SECOND=6
          export TRUSTED_PROXIES="192.168.0.1,192.168.0.2"
          export EXEMPT_FROM_THROTTLE="127.0.0.1,192.168.0.2,::1"
          export APP_NAME=local
          export APP_URL=http://localhost:3000
          export DB_HOST=localhost
          export DB_PORT=5432
          export DB_CONNECTION=pgsql
          export TIMEZONE=Africa/Lagos
          export SSLMODE=disable
          export USERNAME=admin
          export PASSWORD=securepassword
          export DB_NAME=hng_db
          export MIGRATE=false
          export TEST_DB_HOST=localhost
          export TEST_DB_PORT=5432
          export TEST_DB_CONNECTION=pgsql
          export TEST_TIMEZONE=Africa/Lagos
          export TEST_SSLMODE=disable
          export TEST_USERNAME=admin
          export TEST_PASSWORD="securepassword"
          export TEST_DB_NAME=hng_db
          export TEST_MIGRATE=true
          export IPSTACK_KEY=your_ipstack_key
          export IPSTACK_BASE_URL=http://api.ipstack.com
        dest: /opt/stage_5b/.env
        owner: hng
        group: hng
        mode: '0644'

    - name: Copy and update run_production_app.sh
      copy:
        content: |
          #!/bin/bash
          cd /opt/stage_5b
          source .env
          ./hng_boilerplate_golang_web
        dest: /opt/stage_5b/run_production_app.sh
        owner: hng
        group: hng
        mode: '0755'

    - name: Set up logging directory
      file:
        path: /var/log/stage_5b
        state: directory
        owner: hng
        group: hng
        mode: '0755'

    - name: Configure error log
      copy:
        content: ""
        dest: /var/log/stage_5b/error.log
        owner: hng
        group: hng
        mode: '0644'

    - name: Configure stdout log
      copy:
        content: ""
        dest: /var/log/stage_5b/out.log
        owner: hng
        group: hng
        mode: '0644'

    - name: Build the application as hng user
      command: >
        sudo -u hng bash -c '
        cd /opt/stage_5b &&
        go build -buildvcs=false > /var/log/stage_5b/build.log 2>&1'
      register: app_build
      ignore_errors: yes

    - name: Display build log
      shell: tail -n 50 /var/log/stage_5b/build.log
      register: build_log

    - name: Display build log output
      debug:
        msg: "{{ build_log.stdout }}"

    - name: Run the application as hng user
      command: >
        sudo -u hng bash -c '
        cd /opt/stage_5b &&
        source .env &&
        ./run_production_app.sh > /var/log/stage_5b/out.log 2> /var/log/stage_5b/error.log &'
      register: app_run
      ignore_errors: yes

    - name: Display application logs
      shell: tail -n 50 /var/log/stage_5b/out.log
      register: app_log

    - name: Display application log output
      debug:
        msg: "{{ app_log.stdout }}"

    - name: Display error logs
      shell: tail -n 50 /var/log/stage_5b/error.log
      register: error_log

    - name: Display error log output
      debug:
        msg: "{{ error_log.stdout }}"

    - name: Check if the application is running
      shell: |
        pgrep -fl hng_boilerplate_golang_web
      register: app_running

    - name: Display application status
      debug:
        msg: "Application running status: {{ app_running.stdout }}"

    - name: Configure Nginx
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/default
      notify:
        - restart nginx

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

